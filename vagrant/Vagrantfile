# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|

  config.vm.box = "generic/ubuntu1804"
  # config.vm.box_check_update = false

  # config.vm.network "forwarded_port", guest: 80, host: 8080
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
  # config.vm.network "private_network", ip: "192.168.33.10"
  # config.vm.network "public_network"
  # config.vm.synced_folder "../data", "/vagrant_data"

  config.vm.provider "virtualbox" do |vb|
    vb.gui = true
    vb.name = "ros2-dev"

  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  end

  config.vm.provision "shell", inline: <<-SHELL
    set -e

    export DEBIAN_FRONTEND=noninteractive

    # Install xfce and virtualbox additions
    apt-get -y update
    apt-get -y install \
      xubuntu-desktop \
      virtualbox-guest-dkms \
      virtualbox-guest-utils \
      virtualbox-guest-x11

    # Upgrade existing packages
    apt-get -y update
    apt-get -y upgrade

    # Setup UTF-8 locale
    locale-gen en_US.UTF-8
    update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8

    # Add the ROS 2 apt repository
    apt-get -y install \
      curl \
      gnupg2 \
      lsb-release
    curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | \
      apt-key add -
    echo "deb http://packages.ros.org/ros2/ubuntu bionic main" \
      > /etc/apt/sources.list.d/ros2-latest.list

    # Install ROS 2 Debian packages
    apt-get -y update
    apt-get -y install \
      ros-eloquent-desktop \
      python3-argcomplete \
      python3-colcon-common-extensions \
      ros-eloquent-ament-*

    # Install rosdep and have it install missing dependencies
    apt-get -y install python3-rosdep
    rosdep init || true # not an error if it has already been initialized
    apt-get -y update
    sudo --set-home --user=vagrant rosdep update

    # Because the RTI Connext DDS installation requires user input,
    # we are forced to use a program like expect to fake it
    apt-get -y install expect
    cat <<EXPECT_SCRIPT | expect
      set timeout -1
      spawn sudo --set-home --user=vagrant rosdep install -y \
        --from-paths /opt/ros/eloquent/share \
        --ignore-src \
        --rosdistro eloquent
      expect {
        -re ".*More.*" { send " "; exp_continue; }
        -re ".*Do you accept the terms of this license agreement?.*" {
          send "yes\n";
          exp_continue;
        }
      }
EXPECT_SCRIPT

    # Add connext profile file
    cat <<CONNEXT_PROFILE > /etc/profile.d/connext.sh
      export RTI_LICENSE_FILE=/opt/rti.com/rti_connext_dds-5.3.1/rti_license.dat
      if [ -f "/opt/rti.com/rti_connext_dds-5.3.1/resource/scripts/rtisetenv_x64Linux3gcc5.4.0.bash" ]; then
        cd /opt/rti.com/rti_connext_dds-5.3.1/resource/scripts
        source ./rtisetenv_x64Linux3gcc5.4.0.bash > /dev/null
        cd - > /dev/null
      fi
CONNEXT_PROFILE

    # Setup bash environment
    if ! grep "/opt/ros/eloquent/setup.bash" /etc/bash.bashrc &>/dev/null; then
      echo 'if [ -f "/opt/ros/eloquent/setup.bash" ]; then' >> /etc/bash.bashrc
      echo '  source "/opt/ros/eloquent/setup.bash"'        >> /etc/bash.bashrc
      echo 'fi'                                             >> /etc/bash.bashrc
    fi

    # Install dependencies for OMPL
    apt-get -y install \
      build-essential \
      cmake \
      doxygen \
      git \
      libboost-filesystem-dev \
      libboost-program-options-dev \
      libboost-serialization-dev \
      libboost-system-dev \
      libboost-test-dev \
      libeigen3-dev \
      libexpat1 \
      libflann-dev \
      libode-dev \
      libtinfo5 \
      libtriangle-dev \
      ninja-build \
      pkg-config \
      wget

    ##
    ## We don't need OMPLApp and python bindings and the bindings don't compile
    ##

    ## # Install dependencies for OMPL python bindings
    ## apt-get -y install \
    ##   castxml \
    ##   libboost-numpy-dev \
    ##   libboost-python-dev \
    ##   pypy \
    ##   python3-dev \
    ##   python3-numpy \
    ##   python3-pip
    ## pip3 install -vU \
    ##   pygccxml \
    ##   pyplusplus

    ## # Install dependencies for OMPL app
    ## apt-get -y install \
    ##   freeglut3-dev \
    ##   libassimp-dev \
    ##   libccd-dev \
    ##   libfcl-dev \
    ##   python3-celery \
    ##   python3-flask \
    ##   python3-opengl \
    ##   python3-pyqt5.qtopengl
    ## pip3 install -vU \
    ##   PyOpenGL-accelerate

    # Download, compile, and install OMPL
    mkdir -p /opt
    cd /opt

    ## git clone \
    ##   --branch 1.5.0 \
    ##   --recurse-submodules \
    ##   https://github.com/ompl/omplapp.git
    ## mkdir omplapp/build
    ## cd omplapp/build

    git clone \
      --branch 1.5.0 \
      --recurse-submodules \
      https://github.com/ompl/ompl.git
    mkdir ompl/build
    cd ompl/build
    cmake ../ -GNinja \
      -DPYTHON_EXEC=/usr/bin/python3 \
      -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_INSTALL_PREFIX=/usr

    ## # Check if the total memory is less than 6GB
    ## if [ $(head -1 /proc/meminfo | awk '{print $2}') -lt 6291456 ]; then
    ##   echo "Python binding generation is very memory intensive." >&2
    ##   echo "  At least 6GB of RAM is recommended." >&2
    ##   echo "Proceeding with binding generation using 1 core..." >&2
    ##   ninja -j 1 update_bindings
    ## else
    ##   ninja update_bindings
    ## fi

    ninja
    ninja install
    cd /

    # Install development tools
    apt-get -y install \
      apt-transport-https \
      aspell \
      bash-completion \
      build-essential \
      bzr \
      castxml \
      chromium-browser \
      clang \
      clang-9 \
      cmake \
      cmake-curses-gui \
      cppreference-doc-en-html \
      cppreference-doc-en-qch \
      curl \
      dbus-x11 \
      devhelp \
      dochelp \
      doxygen \
      freeglut3-dev \
      gdb \
      git \
      gitk \
      gnupg2 \
      google-mock \
      graphviz \
      gstreamer1.0-qt5 \
      htop \
      ipython3 \
      libassimp-dev \
      libboost-all-dev \
      libccd-dev \
      libeigen3-dev \
      libexpat1 \
      libfcl-dev \
      libflann-dev \
      libgtest-dev \
      libode-dev \
      libpython3-dev \
      libtinfo5 \
      libtriangle-dev \
      locales \
      lsb-release \
      man-db \
      mlocate \
      moreutils \
      ninja-build \
      openssh-server \
      openvpn \
      pkg-config \
      pypy \
      python-matplotlib \
      python-numpy \
      python-pygments \
      python3-argcomplete \
      python3-celery \
      python3-colcon-common-extensions \
      python3-dev \
      python3-flask \
      python3-matplotlib \
      python3-numpy \
      python3-opengl \
      python3-pip \
      python3-pyelftools \
      python3-pygments \
      python3-pyqt5 \
      python3-pyqt5.qtopengl \
      python3-toml \
      screen \
      software-properties-common \
      tcl-dev \
      terminator \
      tk-dev \
      tmux \
      tree \
      vim \
      vim-gnome \
      vim-gtk3 \
      wget

    # Setup Google Test
    apt-get -y install libgtest-dev
    mkdir -p /usr/src/gtest/build
    cd /usr/src/gtest/build
    cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release
    ninja
    cp *.a /usr/lib/

    # Install Visual Studio Code
    wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | \
      apt-key add -
    echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" | \
      tee /etc/apt/sources.list.d/vscode.list
    apt-get -y update
    apt-get -y install code
  SHELL
end
