/**
 * author:        Michael Bentley
 * email:         mikebentley15@gmail.com
 * date-created:  25 May 2021
 */

#include "design-optimization/MultiGoalPlanningCostIK.h"
#include <collision/VoxelOctree.h>
#include <cpptoml/toml_conversions.h>

#include <gtest/gtest.h>

#include <memory>

using MGCostIK = design_optimization::MultiGoalPlanningCostIK;

namespace {

MGCostIK create_cost() {
  MGCostIK cost;
  cost.start_config = {0.1, 0.2, 0.3, 0.4, 0.5, 0.2};
  auto voxels(std::make_shared<collision::VoxelOctree>(128));
  double robot_radius = 0.015;
  double caps_radius = 0.01 + robot_radius;
  voxels->add_capsule({{0.14, 0.06, 0.01}, {0.14, 0.06, 0.09}, caps_radius});
  voxels->add_capsule({{0.127586104634, 0.098206041399, 0.01},
                       {0.127586104634, 0.098206041399, 0.09},
                       caps_radius});
  voxels->add_capsule({{0.0950861046344, 0.121818673559, 0.01},
                       {0.0950861046344, 0.121818673559, 0.09},
                       caps_radius});
  voxels->add_capsule({{0.0549138953656, 0.121818673559, 0.01},
                       {0.0549138953656, 0.121818673559, 0.09},
                       caps_radius});
  voxels->add_capsule({{0.0224138953656, 0.098206041399, 0.01},
                       {0.0224138953656, 0.098206041399, 0.09},
                       caps_radius});
  voxels->add_capsule({{0.01, 0.06, 0.01},
                       {0.01, 0.06, 0.09},
                       caps_radius});
  voxels->add_capsule({{0.0224138953656, 0.021793958601, 0.01},
                       {0.0224138953656, 0.021793958601, 0.09},
                       caps_radius});
  voxels->add_capsule({{0.0549138953656, -0.00181867355918, 0.01},
                       {0.0549138953656, -0.00181867355918, 0.09},
                       caps_radius});
  voxels->add_capsule({{0.0950861046344, -0.00181867355918, 0.01},
                       {0.0950861046344, -0.00181867355918, 0.09},
                       caps_radius});
  voxels->add_capsule({{0.127586104634, 0.021793958601, 0.01},
                       {0.127586104634, 0.021793958601, 0.09},
                       caps_radius});

  cost.venv.set_obstacle_cache(voxels);
  cost.goal_tips = {
    {0.11,            0.06,            0.00},
    {0.103315594803,  0.0805724838302, 0.00},
    {0.0858155948031, 0.0932869780703, 0.00},
    {0.0641844051969, 0.0932869780703, 0.00},
    {0.0466844051969, 0.0805724838302, 0.00},
    {0.04,            0.06,            0.00},
    {0.0466844051969, 0.0394275161698, 0.00},
    {0.0641844051969, 0.0267130219297, 0.00},
    {0.0858155948031, 0.0267130219297, 0.00},
    {0.103315594803,  0.0394275161698, 0.00},

    {0.11,            0.06,            0.01},
    {0.103315594803,  0.0805724838302, 0.01},
    {0.0858155948031, 0.0932869780703, 0.01},
    {0.0641844051969, 0.0932869780703, 0.01},
    {0.0466844051969, 0.0805724838302, 0.01},
    {0.04,            0.06,            0.01},
    {0.0466844051969, 0.0394275161698, 0.01},
    {0.0641844051969, 0.0267130219297, 0.01},
    {0.0858155948031, 0.0267130219297, 0.01},
    {0.103315594803,  0.0394275161698, 0.01},

    {0.11,            0.06,            0.02},
    {0.103315594803,  0.0805724838302, 0.02},
    {0.0858155948031, 0.0932869780703, 0.02},
    {0.0641844051969, 0.0932869780703, 0.02},
    {0.0466844051969, 0.0805724838302, 0.02},
    {0.04,            0.06,            0.02},
    {0.0466844051969, 0.0394275161698, 0.02},
    {0.0641844051969, 0.0267130219297, 0.02},
    {0.0858155948031, 0.0267130219297, 0.02},
    {0.103315594803,  0.0394275161698, 0.02},

    {0.11,            0.06,            0.03},
    {0.103315594803,  0.0805724838302, 0.03},
    {0.0858155948031, 0.0932869780703, 0.03},
    {0.0641844051969, 0.0932869780703, 0.03},
    {0.0466844051969, 0.0805724838302, 0.03},
    {0.04,            0.06,            0.03},
    {0.0466844051969, 0.0394275161698, 0.03},
    {0.0641844051969, 0.0267130219297, 0.03},
    {0.0858155948031, 0.0267130219297, 0.03},
    {0.103315594803,  0.0394275161698, 0.03},

    {0.11,            0.06,            0.04},
    {0.103315594803,  0.0805724838302, 0.04},
    {0.0858155948031, 0.0932869780703, 0.04},
    {0.0641844051969, 0.0932869780703, 0.04},
    {0.0466844051969, 0.0805724838302, 0.04},
    {0.04,            0.06,            0.04},
    {0.0466844051969, 0.0394275161698, 0.04},
    {0.0641844051969, 0.0267130219297, 0.04},
    {0.0858155948031, 0.0267130219297, 0.04},
    {0.103315594803,  0.0394275161698, 0.04},

    {0.11,            0.06,            0.05},
    {0.103315594803,  0.0805724838302, 0.05},
    {0.0858155948031, 0.0932869780703, 0.05},
    {0.0641844051969, 0.0932869780703, 0.05},
    {0.0466844051969, 0.0805724838302, 0.05},
    {0.04,            0.06,            0.05},
    {0.0466844051969, 0.0394275161698, 0.05},
    {0.0641844051969, 0.0267130219297, 0.05},
    {0.0858155948031, 0.0267130219297, 0.05},
    {0.103315594803,  0.0394275161698, 0.05},

    {0.11,            0.06,            0.06},
    {0.103315594803,  0.0805724838302, 0.06},
    {0.0858155948031, 0.0932869780703, 0.06},
    {0.0641844051969, 0.0932869780703, 0.06},
    {0.0466844051969, 0.0805724838302, 0.06},
    {0.04,            0.06,            0.06},
    {0.0466844051969, 0.0394275161698, 0.06},
    {0.0641844051969, 0.0267130219297, 0.06},
    {0.0858155948031, 0.0267130219297, 0.06},
    {0.103315594803,  0.0394275161698, 0.06},

    {0.11,            0.06,            0.07},
    {0.103315594803,  0.0805724838302, 0.07},
    {0.0858155948031, 0.0932869780703, 0.07},
    {0.0641844051969, 0.0932869780703, 0.07},
    {0.0466844051969, 0.0805724838302, 0.07},
    {0.04,            0.06,            0.07},
    {0.0466844051969, 0.0394275161698, 0.07},
    {0.0641844051969, 0.0267130219297, 0.07},
    {0.0858155948031, 0.0267130219297, 0.07},
    {0.103315594803,  0.0394275161698, 0.07},

    {0.11,            0.06,            0.08},
    {0.103315594803,  0.0805724838302, 0.08},
    {0.0858155948031, 0.0932869780703, 0.08},
    {0.0641844051969, 0.0932869780703, 0.08},
    {0.0466844051969, 0.0805724838302, 0.08},
    {0.04,            0.06,            0.08},
    {0.0466844051969, 0.0394275161698, 0.08},
    {0.0641844051969, 0.0267130219297, 0.08},
    {0.0858155948031, 0.0267130219297, 0.08},
    {0.103315594803,  0.0394275161698, 0.08},

    {0.11,            0.06,            0.09},
    {0.103315594803,  0.0805724838302, 0.09},
    {0.0858155948031, 0.0932869780703, 0.09},
    {0.0641844051969, 0.0932869780703, 0.09},
    {0.0466844051969, 0.0805724838302, 0.09},
    {0.04,            0.06,            0.09},
    {0.0466844051969, 0.0394275161698, 0.09},
    {0.0641844051969, 0.0267130219297, 0.09},
    {0.0858155948031, 0.0267130219297, 0.09},
    {0.103315594803,  0.0394275161698, 0.09},
  };
  return cost;
}

} // end of unnamed namespace

TEST(MultiGoalPlanningCostIKTests, to_toml_default) {
  MGCostIK cost;
  auto actual = MGCostIK::from_toml(MGCostIK().to_toml());
  ASSERT_EQ(cost.start_config                , actual.start_config                );
  ASSERT_EQ(cost.goal_tips                   , actual.goal_tips                   );
  ASSERT_EQ(cost.venv                        , actual.venv                        );
  ASSERT_EQ(cost.tip_threshold               , actual.tip_threshold               );
  ASSERT_EQ(cost.time_limit_seconds          , actual.time_limit_seconds          );
  ASSERT_EQ(cost.ik_max_iters                , actual.ik_max_iters                );
  ASSERT_EQ(cost.ik_mu_init                  , actual.ik_mu_init                  );
  ASSERT_EQ(cost.ik_stop_threshold_JT_err_inf, actual.ik_stop_threshold_JT_err_inf);
  ASSERT_EQ(cost.ik_stop_threshold_Dp        , actual.ik_stop_threshold_Dp        );
  ASSERT_EQ(cost.ik_finite_difference_delta  , actual.ik_finite_difference_delta  );
  ASSERT_EQ(cost.rrt_grow_distance           , actual.rrt_grow_distance           );
  ASSERT_EQ(cost.rrt_goal_bias               , actual.rrt_goal_bias               );
}

TEST(MultiGoalPlanningCostIKTests, to_toml) {
  MGCostIK cost = create_cost();
  auto actual = MGCostIK::from_toml(cost.to_toml());
  ASSERT_EQ(cost.start_config                , actual.start_config                );
  ASSERT_EQ(cost.goal_tips                   , actual.goal_tips                   );
  ASSERT_EQ(cost.venv                        , actual.venv                        );
  ASSERT_EQ(cost.tip_threshold               , actual.tip_threshold               );
  ASSERT_EQ(cost.time_limit_seconds          , actual.time_limit_seconds          );
  ASSERT_EQ(cost.ik_max_iters                , actual.ik_max_iters                );
  ASSERT_EQ(cost.ik_mu_init                  , actual.ik_mu_init                  );
  ASSERT_EQ(cost.ik_stop_threshold_JT_err_inf, actual.ik_stop_threshold_JT_err_inf);
  ASSERT_EQ(cost.ik_stop_threshold_Dp        , actual.ik_stop_threshold_Dp        );
  ASSERT_EQ(cost.ik_finite_difference_delta  , actual.ik_finite_difference_delta  );
  ASSERT_EQ(cost.rrt_grow_distance           , actual.rrt_grow_distance           );
  ASSERT_EQ(cost.rrt_goal_bias               , actual.rrt_goal_bias               );
}
